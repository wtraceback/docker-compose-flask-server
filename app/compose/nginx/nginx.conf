user  nginx;
worker_processes  auto;

error_log   /var/log/nginx/error.log notice;
pid         /var/log/nginx/nginx.pid;

events {
    use   epoll;                # epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    worker_connections  1024;   # 单个后台 worker process 进程的最大并发链接数
}

#设定 http 服务器，利用它的反向代理功能提供负载均衡支持
http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    sendfile        on;
    keepalive_timeout  65;

    # 设定请求缓冲
    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;

    include /etc/nginx/conf.d/*.conf;

    # 设定负载均衡的服务器列表
    upstream flask {
        ip_hash;
        server web:9000; # Docker-compose web 服务端口，该 ip 是云服务器本机的地址，根据实际情况修改
    }

    server {
        listen 80   ; # 监听 80 端口
        server_name localhost;

        charset utf-8;
        client_max_body_size 1024m;

        location /static/ {
            # 需要提前把要托管的静态文件放置到挂载的数据卷中 ./app/compose/nginx/html:/usr/share/nginx/html，容器内就可以访问到了
            # 或者直接将要挂载到 nginx 容器中的数据卷指向前端项目的 static 或 templates 目录中
            alias /usr/share/nginx/html/;       # 和 docker-compose 中挂载的数据卷保持一致
            add_header Cache-Control no-store;

            autoindex on;       # 开启索引功能，可以在浏览器上显示目录

            # 关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb）
            autoindex_exact_size off;

            autoindex_localtime on;     # 显示本机时间而非 GMT 时间
        }

        location / {
            proxy_pass http://flask;
            proxy_read_timeout 6000;
            proxy_connect_timeout 6000;
            proxy_send_timeout 6000;

            # Nginx 解决浏览器跨域问题
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Headers X-Requested-With;
            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,PATCH,OPTIONS;
       }
    }
}